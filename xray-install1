#!/bin/bash

# Update system and install dependencies
apt update
apt install qrencode curl jq -y

# Enable BBR
if ! sysctl -a | grep -q "net.ipv4.tcp_congestion_control = bbr"; then
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
    sysctl -p
    echo "BBR enabled"
fi

# Install Xray
bash -c "$(curl -4 -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# Generate keys
keys_file="/usr/local/etc/xray/.keys"
rm -f "$keys_file"
touch "$keys_file"
echo "shortsid: $(openssl rand -hex 8)" >> "$keys_file"
echo "uuid: $(xray uuid)" >> "$keys_file"
xray x25519 >> "$keys_file"

uuid=$(awk -F': ' '/uuid/ {print $2}' "$keys_file")
private_key=$(awk -F': ' '/PrivateKey/ {print $2}' "$keys_file")
short_id=$(awk -F': ' '/shortsid/ {print $2}' "$keys_file")

# Create Xray config with VK.com masking
cat << EOF > /usr/local/etc/xray/config.json
{
    "log": {
        "loglevel": "warning"
    },
    "inbounds": [
        {
            "listen": "0.0.0.0",
            "port": 443,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "$uuid",
                        "flow": "xtls-rprx-vision"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "tcp",
                "security": "reality",
                "realitySettings": {
                    "show": false,
                    "dest": "vk.com:443",
                    "xver": 0,
                    "serverNames": ["vk.com", "www.vk.com", "m.vk.com", "api.vk.com"],
                    "privateKey": "$private_key",
                    "minClientVer": "",
                    "maxClientVer": "",
                    "maxTimeDiff": 0,
                    "shortIds": ["$short_id"]
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls", "fakedns"]
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "tag": "direct"
        }
    ]
}
EOF

# Create management scripts

# userlist script
cat << 'EOF' > /usr/local/bin/userlist
#!/bin/bash
config_file="/usr/local/etc/xray/config.json"
if ! jq -e '.inbounds[0].settings.clients | length > 0' "$config_file" >/dev/null; then
    echo "No clients found"
    exit 1
fi
echo "Client list:"
jq -r '.inbounds[0].settings.clients[] | "\(.email // "no-email") (\(.id))"' "$config_file"
EOF
chmod +x /usr/local/bin/userlist

# mainuser script
cat << 'EOF' > /usr/local/bin/mainuser
#!/bin/bash
keys_file="/usr/local/etc/xray/.keys"
config_file="/usr/local/etc/xray/config.json"

uuid=$(awk -F': ' '/uuid/ {print $2}' "$keys_file")
public_key=$(awk -F': ' '/PublicKey/ {print $2}' "$keys_file")
short_id=$(awk -F': ' '/shortsid/ {print $2}' "$keys_file")
sni="m.vk.com"
ip=$(curl -4 -s icanhazip.com)

link="vless://$uuid@$ip:443?security=reality&sni=$sni&fp=chrome&pbk=$public_key&sid=$short_id&type=tcp&flow=xtls-rprx-vision#VK-Masked-VPN"

echo "Connection link:"
echo "$link"
echo ""
echo "QR code:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/mainuser

# newuser script
cat << 'EOF' > /usr/local/bin/newuser
#!/bin/bash
config_file="/usr/local/etc/xray/config.json"
keys_file="/usr/local/etc/xray/.keys"

read -p "Enter username: " username
if [[ -z "$username" ]]; then
    echo "Username cannot be empty"
    exit 1
fi

if jq -e --arg email "$username" '.inbounds[0].settings.clients[] | select(.email == $email)' "$config_file" >/dev/null; then
    echo "User already exists"
    exit 1
fi

new_uuid=$(xray uuid)
jq --arg email "$username" --arg uuid "$new_uuid" '.inbounds[0].settings.clients += [{"email": $email, "id": $uuid, "flow": "xtls-rprx-vision"}]' "$config_file" > tmp.json && mv tmp.json "$config_file"

systemctl restart xray

public_key=$(awk -F': ' '/PublicKey/ {print $2}' "$keys_file")
short_id=$(awk -F': ' '/shortsid/ {print $2}' "$keys_file")
sni="m.vk.com"
ip=$(curl -4 -s icanhazip.com)

link="vless://$new_uuid@$ip:443?security=reality&sni=$sni&fp=chrome&pbk=$public_key&sid=$short_id&type=tcp&flow=xtls-rprx-vision#$username"

echo "New user connection link:"
echo "$link"
echo ""
echo "QR code:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/newuser

# rmuser script
cat << 'EOF' > /usr/local/bin/rmuser
#!/bin/bash
config_file="/usr/local/etc/xray/config.json"

echo "Client list:"
jq -r '.inbounds[0].settings.clients[] | "\(.email // "no-email") (\(.id))"' "$config_file"

read -p "Enter username to delete: " username
if [[ -z "$username" ]]; then
    echo "Username cannot be empty"
    exit 1
fi

jq --arg email "$username" 'del(.inbounds[0].settings.clients[] | select(.email == $email))' "$config_file" > tmp.json && mv tmp.json "$config_file"
systemctl restart xray
echo "User $username deleted"
EOF
chmod +x /usr/local/bin/rmuser

# Start services
systemctl restart xray
systemctl enable xray

echo "=================================================="
echo "Xray with VK.com masking installed!"
echo ""
echo "Features:"
echo "- Reality protocol with VK.com SNI masking"
echo "- FakeDNS for better obfuscation"
echo "- Mobile VK.com host (m.vk.com)"
echo "- Multiple VK.com serverNames"
echo ""
echo "Use 'mainuser' to get connection link"
echo "=================================================="
