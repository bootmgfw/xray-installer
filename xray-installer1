#!/usr/bin/env bash
set -euo pipefail

# ====== Настройки ======
DOMAIN="vpn.calamity.one"
SNI="ya.ru"                    # SNI для обхода whitelist
XRAY_PORT=443
XRAY_CONFIG="/usr/local/etc/xray/config.json"
KEYS_FILE="/usr/local/etc/xray/.keys"
SSL_DIR="/etc/ssl/xray"

# ====== ВСТАВЬ ТУТ СВОЙ ORIGIN CERT И PRIVATE KEY (Cloudflare) ======
CERT_CONTENT='-----BEGIN CERTIFICATE-----
MIIEpDCCA4ygAwIBAgIUW2KMEX5vbszn9GEfMt2Uu0SjS0cwDQYJKoZIhvcNAQEL
BQAwgYsxCzAJBgNVBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMTQw
MgYDVQQLEytDbG91ZEZsYXJlIE9yaWdpbiBTU0wgQ2VydGlmaWNhdGUgQXV0aG9y
aXR5MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlh
MB4XDTI1MTAxNTE0NDYwMFoXDTQwMTAxMTE0NDYwMFowYjEZMBcGA1UEChMQQ2xv
dWRGbGFyZSwgSW5jLjEdMBsGA1UECxMUQ2xvdWRGbGFyZSBPcmlnaW4gQ0ExJjAk
BgNVBAMTHUNsb3VkRmxhcmUgT3JpZ2luIENlcnRpZmljYXRlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxb+AYm3cTF1Se9Rggl4zrdbBL4bxVZLoOwIj
f1cf/saB0AzcLgJqWBseZUwQAU0LHXXkz6ZinnIJJx/h1uEZp6oQwdoECZwQ29WK
na2S3Ar4cwebQ9tBlY/2OKMsll07LHPx3N0C1ijS3aRiveFWOwy5qzHAdyhbjaA7
/VinrgRWwm91AyS3/scZLRaK7KrbS5JS2Qx0+uCPgfYuQ9LNWAiK+PcOz0TEVdG7
bGsy3FMPgd+JijiAFJKHSND9dGn3ZSi5w/AzQmBHvtSI4x0XcdAkLueW94odv8Cf
9oae1x/I98bz3x+MtyuozCPRdkYgwDMNGJ0q6zaf8vA+qofOywIDAQABo4IBJjCC
ASIwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD
ATAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTRJkIQT8l6Bgzcj8R1pcHcIPGHpDAf
BgNVHSMEGDAWgBQk6FNXXXw0QIep65TbuuEWePwppDBABggrBgEFBQcBAQQ0MDIw
MAYIKwYBBQUHMAGGJGh0dHA6Ly9vY3NwLmNsb3VkZmxhcmUuY29tL29yaWdpbl9j
YTAnBgNVHREEIDAegg4qLmNhbGFtaXR5Lm9uZYIMY2FsYW1pdHkub25lMDgGA1Ud
HwQxMC8wLaAroCmGJ2h0dHA6Ly9jcmwuY2xvdWRmbGFyZS5jb20vb3JpZ2luX2Nh
LmNybDANBgkqhkiG9w0BAQsFAAOCAQEAkd+sF2GBlCNLK/UleH7HLJVcTDaZYuP1
rAWf1Pq0hQ/TmhhmioZg84qbYXub5GnTukpT2pa5au/EiMowhxtYvV4X1KUnmxH4
aOfGlvaD4r7yfsYGtMkvpOHWflAL2juDwUdzlmYq6Gl/1/xFYyjGPAhdHKWbGCqb
ud/hVDQ6ch8jaWZt7fcIuPUOplXChZbgUgjOoDRhN/0LG3JlvcPygOFY51Kn1fux
6o65joD9JKxboYrWL0L2rZKH1BOdvke9wXcGA3dEHzRZr9U+IZcig7kI1IW8bz1+
zr3Ckq62fyPCORUGaUVON9i1OnVKjY+Z5HbcxNCG0+Mt5E7W/jrxqw==
-----END CERTIFICATE-----'

KEY_CONTENT='-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDFv4BibdxMXVJ7
1GCCXjOt1sEvhvFVkug7AiN/Vx/+xoHQDNwuAmpYGx5lTBABTQsddeTPpmKecgkn
H+HW4RmnqhDB2gQJnBDb1YqdrZLcCvhzB5tD20GVj/Y4oyyWXTssc/Hc3QLWKNLd
pGK94VY7DLmrMcB3KFuNoDv9WKeuBFbCb3UDJLf+xxktForsqttLklLZDHT64I+B
9i5D0s1YCIr49w7PRMRV0btsazLcUw+B34mKOIAUkodI0P10afdlKLnD8DNCYEe+
1IjjHRdx0CQu55b3ih2/wJ/2hp7XH8j3xvPfH4y3K6jMI9F2RiDAMw0YnSrrNp/y
8D6qh87LAgMBAAECggEAPkO3rYZxDLx/uczb3IDD3fNWXdwsBildJSNdwP1Sbjrb
6gH6nCQXjwlu7y9dhMNZAhw6gSWfPMukVSTlS+8R0GisoRVAGzSAXG/nFxHtwYpU
w4d8HIgfpPOw8BF0+x19Adi6KbSPbZZqGu7lRmt65tnxZlWiiAJ1nWj8Kp/tIE3g
XD9aqVsHKznmQOU5sguHXNTFniZdtg9ZuGiOUKTUDlu++/Kz0PU8iSvr1dkfF8yG
tTuMjWBUAVoiUXwL87dL1tVQkXUsbiQKoH337Dx6NGMFEc4Cjp4tgOyFtULkd60J
hX3Y/dt2CpfRF46HD4sLui4uN7iAhhoBogg/+NPEdQKBgQDyYiwfQKzMeEVMdDle
30BV2ZD79TxdYD/T6VQUryaE1IfLOY7rqB9SRxXrRMAPSjA73yaKy+43nHAbutGW
hzixzKCHIvLi2KZztKfEgcXR2kR/swgBofojoOt42JRydUhQQpOxsFQ4Ff1Qmqmv
A0QT+Uc7Hi2AQmsYSZiHXEy83wKBgQDQ22gWnIqiRa39SxwsgHonWvDwh9Lyf8mB
2A+HXQsnd+/dEpXcoU/RURFpv3XU+Y/PxjM2q2wj1sIMurwTl+40lGSNCGUlWTn9
RSBGiIBGFWylq7pP0qp0qenuTqmPMY7oUo6ddlB2+XM5trny1btqApNcpTfOdHxP
S5S9ef0/lQKBgQDAGJYnXraUhm1FnocpbX4ri/af+UgSKQntBOsiSX4Zn+bPZZqj
oebQ6o2wnBgrBf0cNkrxjZYKdO1UzMb2qcyA/U/sSgJ9Tn79DJw53S/OlVHccyNR
R/Ja8losuFlOLS1Wjq1HEhxtJuBQVYNNtSTrP5D4hX5CPGFsKke8X6ZhuQKBgQCd
rEYUa/GtN/V2N3H5lrShaWJj8+Yo9Jfn0nlGs9Nr5HvM5e8FNTLQzubacpQ+SHlt
Xi/jod5t3/93JLJACH7oau7OGfxiCc5higInvX05a4suN0rcYCoXEP9tzSzs0XkV
ot3PujZc201F0NDoprpp+a/OTVyoHACMzH5p3OJ3UQKBgQC/UWHt83yXduwxjh+i
y7wzoCSqLmjN+F149oMjoLLO9DUwxDygNX3qlSxfFc/jLzmmyKHPyGOIr/G2FizJ
FZp1pHJyygPYqYdcph+bp/CVFSr1yJX7J50q3/Du0YkzwXvmk+84BmX2MUudeY5R
CzNg9IH1dpQ5wLVvHmkY94yyMQ==
-----END PRIVATE KEY-----'

# ====== End of cert/key blocks ======

echo "Stopping nginx to free port 443 (if any)..."
systemctl stop nginx 2>/dev/null || true

# ====== Install dependencies ======
apt update
apt install -y curl jq qrencode socat ca-certificates openssl

# ====== Install Xray if missing ======
if ! command -v xray >/dev/null 2>&1; then
  echo "Installing xray..."
  bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" install
fi

# ====== Write cert/key files ======
mkdir -p "${SSL_DIR}"
echo "$CERT_CONTENT" > "${SSL_DIR}/fullchain.pem"
echo "$KEY_CONTENT" > "${SSL_DIR}/privkey.pem"
chmod 644 "${SSL_DIR}/fullchain.pem"
chmod 600 "${SSL_DIR}/privkey.pem"
chown root:root "${SSL_DIR}/"*

# ====== Generate keys and shortid ======
mkdir -p /usr/local/etc/xray
echo "" > "${KEYS_FILE}"
UUID=$(xray uuid)
echo "uuid: ${UUID}" >> "${KEYS_FILE}"
X25519_OUTPUT=$(xray x25519)
echo "${X25519_OUTPUT}" >> "${KEYS_FILE}"
PUBKEY=$(echo "${X25519_OUTPUT}" | awk -F': ' '/PublicKey/ {print $2}' | tr -d '\r')
PRIVKEY_X=$(echo "${X25519_OUTPUT}" | awk -F': ' '/PrivateKey/ {print $2}' | tr -d '\r')
SHORTSID=$(openssl rand -hex 8)
echo "shortsid: ${SHORTSID}" >> "${KEYS_FILE}"
chmod 600 "${KEYS_FILE}"

# ====== Create Xray config (VLESS WS+TLS on 0.0.0.0:443) ======
cat > "${XRAY_CONFIG}" <<JSON
{
  "log": { "loglevel": "warning" },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "domain": ["geosite:category-ads-all"],
        "outboundTag": "block"
      }
    ]
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": ${XRAY_PORT},
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "email": "main",
            "id": "${UUID}",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "ws",
        "security": "tls",
        "tlsSettings": {
          "serverName": "${SNI}",
          "certificates": [
            {
              "certificateFile": "${SSL_DIR}/fullchain.pem",
              "keyFile": "${SSL_DIR}/privkey.pem"
            }
          ]
        },
        "wsSettings": {
          "path": "/vless",
          "headers": { "Host": "${DOMAIN}" }
        }
      },
      "sniffing": { "enabled": true, "destOverride": ["http","tls"] }
    }
  ],
  "outbounds": [
    { "protocol": "freedom", "tag": "direct" },
    { "protocol": "blackhole", "tag": "block" }
  ]
}
JSON

# Fix permissions so xray can read key
chown -R nobody:nogroup "${SSL_DIR}"
chmod 640 "${SSL_DIR}/"*

# ====== Restart xray ======
systemctl daemon-reload || true
systemctl enable xray --now || true
sleep 1

if ! systemctl is-active --quiet xray; then
  echo "xray failed to start. Show last logs:"
  journalctl -u xray -n 200 --no-pager
  exit 1
fi

# ====== Create helper scripts (like в оригинальном инсталлере) ======
cat > /usr/local/bin/userlist <<'EOF'
#!/bin/bash
jq -r '.inbounds[0].settings.clients[].email' /usr/local/etc/xray/config.json 2>/dev/null || echo "No clients found"
EOF
chmod +x /usr/local/bin/userlist

cat > /usr/local/bin/mainuser <<'EOF'
#!/bin/bash
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=$(jq -r '.inbounds[0].settings.clients[0].id' /usr/local/etc/xray/config.json)
pbk=$(grep -oP '(?<=PublicKey: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
sid=$(grep -oP '(?<=shortsid: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
sni="${SNI}"
host="${DOMAIN}"
ip=$(curl -4 -s icanhazip.com || echo "${host}")
link="${protocol}://${uuid}@${host}:443?type=ws&security=tls&sni=${sni}&host=${host}&path=%2Fvless&fp=chrome&pbk=${pbk}&sid=${sid}&flow=xtls-rprx-vision#${host}"
echo ""
echo "Connection link:"
echo "${link}"
echo ""
echo "QR-code:"
echo "${link}" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/mainuser

cat > /usr/local/bin/newuser <<'EOF'
#!/bin/bash
read -p "Enter username (email): " email
if [[ -z "$email" || "$email" == *" "* ]]; then
  echo "Username cannot be empty or contain spaces."
  exit 1
fi
exists=$(jq --arg em "$email" '.inbounds[0].settings.clients[]? | select(.email==$em)' /usr/local/etc/xray/config.json)
if [[ -n "$exists" ]]; then
  echo "User already exists."
  exit 1
fi
uuid=$(xray uuid)
tmp=$(mktemp)
jq --arg em "$email" --arg id "$uuid" '.inbounds[0].settings.clients += [{"email": $em, "id": $id, "flow":"xtls-rprx-vision"}]' /usr/local/etc/xray/config.json > "${tmp}" && mv "${tmp}" /usr/local/etc/xray/config.json
systemctl restart xray
index=$(jq -r --arg em "$email" '.inbounds[0].settings.clients | to_entries[] | select(.value.email==$em) | .key' /usr/local/etc/xray/config.json)
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=$(jq -r --argjson index "$index" '.inbounds[0].settings.clients[$index].id' /usr/local/etc/xray/config.json)
pbk=$(grep -oP '(?<=PublicKey: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
sid=$(grep -oP '(?<=shortsid: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
host="${DOMAIN}"
sni="${SNI}"
link="${protocol}://${uuid}@${host}:443?type=ws&security=tls&sni=${sni}&host=${host}&path=%2Fvless&fp=chrome&pbk=${pbk}&sid=${sid}&flow=xtls-rprx-vision#${email}"
echo ""
echo "User created: $email"
echo "Connection link:"
echo "$link"
echo ""
echo "QR-code:"
echo "${link}" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/newuser

cat > /usr/local/bin/rmuser <<'EOF'
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' /usr/local/etc/xray/config.json))
if [[ ${#emails[@]} -eq 0 ]]; then
  echo "No users."
  exit 1
fi
echo "Clients:"
for i in "${!emails[@]}"; do
  echo "$((i+1)). ${emails[$i]}"
done
read -p "Choose number to remove: " num
if ! [[ "$num" =~ ^[0-9]+$ ]] || (( num < 1 || num > ${#emails[@]} )); then
  echo "Invalid"
  exit 1
fi
sel="${emails[$((num-1))]}"
tmp=$(mktemp)
jq --arg em "$sel" '(.inbounds[0].settings.clients) |= map(select(.email != $em))' /usr/local/etc/xray/config.json > "${tmp}" && mv "${tmp}" /usr/local/etc/xray/config.json
systemctl restart xray
echo "Removed $sel"
EOF
chmod +x /usr/local/bin/rmuser

cat > /usr/local/bin/sharelink <<'EOF'
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' /usr/local/etc/xray/config.json))
if [[ ${#emails[@]} -eq 0 ]]; then
  echo "No users."
  exit 1
fi
for i in "${!emails[@]}"; do
  echo "$((i+1)). ${emails[$i]}"
done
read -p "Choose user number: " num
if ! [[ "$num" =~ ^[0-9]+$ ]] || (( num < 1 || num > ${#emails[@]} )); then
  echo "Invalid"
  exit 1
fi
sel="${emails[$((num-1))]}"
index=$(jq -r --arg em "$sel" '.inbounds[0].settings.clients | to_entries[] | select(.value.email==$em) | .key' /usr/local/etc/xray/config.json)
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=$(jq -r --argjson index "$index" '.inbounds[0].settings.clients[$index].id' /usr/local/etc/xray/config.json)
pbk=$(grep -oP '(?<=PublicKey: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
sid=$(grep -oP '(?<=shortsid: ).*' /usr/local/etc/xray/.keys 2>/dev/null)
host="${DOMAIN}"
sni="${SNI}"
link="${protocol}://${uuid}@${host}:443?type=ws&security=tls&sni=${sni}&host=${host}&path=%2Fvless&fp=chrome&pbk=${pbk}&sid=${sid}&flow=xtls-rprx-vision#${sel}"
echo ""
echo "Connection link for ${sel}:"
echo "$link"
echo ""
echo "QR-code:"
echo "${link}" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/sharelink

# ====== Create help file in home ======
cat > /root/help <<'EOF'
Xray user management commands (installed by installer):

  mainuser   - show connection link + QR for main user (first client)
  newuser    - create new user (email) and output link+QR
  rmuser     - remove user by number
  sharelink  - pick user and print link+QR
  userlist   - show list of clients

Config file: /usr/local/etc/xray/config.json
Restart xray: systemctl restart xray
EOF

# ====== Final output ======
PBK="${PUBKEY}"
SID="${SHORTSID}"
LINK="vless://${UUID}@${DOMAIN}:443?type=ws&security=tls&sni=${SNI}&host=${DOMAIN}&path=%2Fvless&fp=chrome&pbk=${PBK}&sid=${SID}&flow=xtls-rprx-vision#${DOMAIN}"

echo
echo "=== INSTALL COMPLETE ==="
echo "Domain: ${DOMAIN}"
echo "SNI to use in client: ${SNI}"
echo "Main client link:"
echo "${LINK}"
echo
echo "QR:"
echo "${LINK}" | qrencode -t ansiutf8
echo
echo "Useful commands:"
echo " mainuser  - show main user's link + QR"
echo " newuser   - add new user"
echo " rmuser    - remove user"
echo " sharelink - generate link for any user"
echo " userlist  - list clients"
echo
echo "If client reports cert mismatch, either set Host=${DOMAIN} in client and enable skip-cert-verification, or use the Cloudflare Origin cert in the client's trust store."
echo "Check logs: journalctl -u xray -f"
