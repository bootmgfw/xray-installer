#!/bin/bash
# Xray Reality VLESS INSTALER - максимальный обход DPI/глушилок РФ мобильного интернета

set -e

apt update
apt install qrencode curl jq -y

bbr=$(sysctl -a | grep net.ipv4.tcp_congestion_control)
if [ "$bbr" = "net.ipv4.tcp_congestion_control = bbr" ]; then
  echo "bbr is already enabled"
else
  echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
  sysctl -p
  echo "bbr enabled"
fi

bash -c "$(curl -4 -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install
[ -f /usr/local/etc/xray/.keys ] && rm /usr/local/etc/xray/.keys
touch /usr/local/etc/xray/.keys
echo "shortsid: $(openssl rand -hex 8)" >> /usr/local/etc/xray/.keys
echo "uuid: $(xray uuid)" >> /usr/local/etc/xray/.keys
xray x25519 >> /usr/local/etc/xray/.keys

export uuid=$(awk -F': ' '/uuid/ {print $2}' /usr/local/etc/xray/.keys)
export privatkey=$(awk -F': ' '/PrivateKey/ {print $2}' /usr/local/etc/xray/.keys)
export shortsid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)

# --- Списки SNI/DEST ---
allowed_sni=(
  "ya.ru"
  "mail.ru"
  "sun6-22.userapi.com"
  "stats.vk-portal.net"
  "avatars.mds.yandex.net"
  "top-fwz1.mail.ru"
  "ad.mail.ru"
  "st.ozone.ru"
  "ir.ozone.ru"
  "vt-1.ozone.ru"
  "io.ozone.ru"
  "xapi.ozon.ru"
  "online.sberbank.ru"
  "goya.rutube.ru"
  "www.kinopoisk.ru"
  "dzen.ru"
  "yastatic.net"
  "sntr.avito.ru"
  "www.magnit.com"
  "2gis.ru"
  "splitter.wb.ru"
  "alfabank.ru"
  "login.vk.com"
  "ozone.ru"
  "storage.yandexcloud.net"
  # ...добавь свои, если нужно!
)

echo "Выбери SNI/DEST для обхода (домен должен быть разрешён оператором):"
for i in "${!allowed_sni[@]}"; do
    echo "$((i+1)). ${allowed_sni[$i]}"
done

read -p "Номер домена (или Enter для ya.ru): " choice

if [[ -z "$choice" ]]; then
  selected_sni="ya.ru"
elif ! [[ "$choice" =~ ^[0-9]+$ ]] || (( choice < 1 || choice > ${#allowed_sni[@]} )); then
  echo "Некорректный номер, используем ya.ru"
  selected_sni="ya.ru"
else
  selected_sni="${allowed_sni[$((choice-1))]}"
fi

# --- FINGERPRINT/JА3 ---
echo "Выбери fingerprint для обхода DPI (fp):"
echo "1. firefox"
echo "2. chrome"
echo "3. safari"
echo "4. random"
read -p "Номер fp (или Enter для firefox): " fpchoice

case "$fpchoice" in
  2) fp="chrome" ;;
  3) fp="safari" ;;
  4) fp="random" ;;
  *) fp="firefox" ;;
esac

# --- PORT SELECTION ---
read -p "На каком порту слушать? (обычно 443, Enter для 443): " port
if [[ -z "$port" ]]; then
  port=443
fi

# --- RU Location Warning ---
echo ""
echo "!!! ВНИМАНИЕ: для мобильного РФ рекомендуется сервер с RU-локацией (aeza.ru, vdsina.ru, selectel.ru и пр.)"
echo "!!! В некоторых регионах работает только RU-локация и только определённые домены (SNI)!"
echo ""

# --- Генерация конфига Xray с максимальным обходом ---
cat << EOF > /usr/local/etc/xray/config.json
{
    "log": { "loglevel": "warning" },
    "routing": {
        "domainStrategy": "IPIfNonMatch",
        "rules": [
            { "type": "field", "domain": ["geosite:category-ads-all"], "outboundTag": "block" }
        ]
    },
    "inbounds": [
        {
            "listen": "0.0.0.0",
            "port": $port,
            "protocol": "vless",
            "settings": {
                "clients": [
                    { "email": "main", "id": "$uuid", "flow": "xtls-rprx-vision" }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "tcp",
                "security": "reality",
                "realitySettings": {
                    "show": false,
                    "dest": "${selected_sni}:443",
                    "xver": 0,
                    "serverNames": [
                        "${selected_sni}"
                    ],
                    "privateKey": "$privatkey",
                    "minClientVer": "",
                    "maxClientVer": "",
                    "maxTimeDiff": 0,
                    "shortIds": [
                        "$shortsid"
                    ]
                },
                "realitySettingsExt": {
                    "fingerprint": "$fp"
                }
            },
            "sniffing": { "enabled": true, "destOverride": ["http", "tls"] }
        }
    ],
    "outbounds": [
        { "protocol": "freedom", "tag": "direct" },
        { "protocol": "blackhole", "tag": "block" }
    ],
    "policy": { "levels": { "0": { "handshake": 3, "connIdle": 180 } } }
}
EOF

systemctl restart xray

# --- Скрипты управления пользователями (userlist/mainuser/newuser/rmuser/sharelink) ---
touch /usr/local/bin/userlist
cat << 'EOF' > /usr/local/bin/userlist
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' "/usr/local/etc/xray/config.json"))
if [[ ${#emails[@]} -eq 0 ]]; then
    echo "Client list is empty"
    exit 1
fi
echo "Clients list:"
for i in "${!emails[@]}"; do
    echo "$((i+1)). ${emails[$i]}"
done
EOF
chmod +x /usr/local/bin/userlist

touch /usr/local/bin/mainuser
cat << 'EOF' > /usr/local/bin/mainuser
#!/bin/bash
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=$(awk -F': ' '/uuid/ {print $2}' /usr/local/etc/xray/.keys)
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/xray/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
fp=$(jq -r '.inbounds[0].streamSettings.realitySettingsExt.fingerprint' /usr/local/etc/xray/config.json)
ip=$(timeout 3 curl -4 -s icanhazip.com)
link="$protocol://$uuid@$ip:$port?security=reality&sni=$sni&fp=$fp&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#vless-$ip"
echo ""
echo "Connection link:"
echo "$link"
echo ""
echo "QR-code:"
echo ${link} | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/mainuser

touch /usr/local/bin/newuser
cat << 'EOF' > /usr/local/bin/newuser
#!/bin/bash
read -p "Enter username (email): " email
if [[ -z "$email" || "$email" == *" "* ]]; then
    echo "Username cannot be empty or contain spaces. Try again."
    exit 1
fi
user_json=$(jq --arg email "$email" '.inbounds[0].settings.clients[] | select(.email == $email)' /usr/local/etc/xray/config.json)
if [[ -z "$user_json" ]]; then
uuid=$(xray uuid)
jq --arg email "$email" --arg uuid "$uuid" '.inbounds[0].settings.clients += [{"email": $email, "id": $uuid, "flow": "xtls-rprx-vision"}]' /usr/local/etc/xray/config.json > tmp.json && mv tmp.json /usr/local/etc/xray/config.json
systemctl restart xray
index=$(jq --arg email "$email" '.inbounds[0].settings.clients | to_entries[] | select(.value.email == $email) | .key'  /usr/local/etc/xray/config.json)
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=$(jq --argjson index "$index" -r '.inbounds[0].settings.clients[$index].id' /usr/local/etc/xray/config.json)
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/xray/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)
username=$(jq --argjson index "$index" -r '.inbounds[0].settings.clients[$index].email' /usr/local/etc/xray/config.json)
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
fp=$(jq -r '.inbounds[0].streamSettings.realitySettingsExt.fingerprint' /usr/local/etc/xray/config.json)
ip=$(curl -4 -s icanhazip.com)
link="$protocol://$uuid@$ip:$port?security=reality&sni=$sni&fp=$fp&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$username"
echo ""
echo "Connection link:"
echo "$link"
echo ""
echo "QR-code:"
echo ${link} | qrencode -t ansiutf8
else
echo "User with this name already exists. Try again."
fi
EOF
chmod +x /usr/local/bin/newuser

touch /usr/local/bin/rmuser
cat << 'EOF' > /usr/local/bin/rmuser
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' "/usr/local/etc/xray/config.json"))
if [[ ${#emails[@]} -eq 0 ]]; then
    echo "No clients to remove."
    exit 1
fi
echo "Clients list:"
for i in "${!emails[@]}"; do
    echo "$((i+1)). ${emails[$i]}"
done
read -p "Enter client number to remove: " choice
if ! [[ "$choice" =~ ^[0-9]+$ ]] || (( choice < 1 || choice > ${#emails[@]} )); then
    echo "Error: number must be between 1 and ${#emails[@]}"
    exit 1
fi
selected_email="${emails[$((choice - 1))]}"
jq --arg email "$selected_email" \
   '(.inbounds[0].settings.clients) |= map(select(.email != $email))' \
   "/usr/local/etc/xray/config.json" > tmp && mv tmp "/usr/local/etc/xray/config.json"
systemctl restart xray
echo "Client $selected_email removed."
EOF
chmod +x /usr/local/bin/rmuser

touch /usr/local/bin/sharelink
cat << 'EOF' > /usr/local/bin/sharelink
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' /usr/local/etc/xray/config.json))
for i in "${!emails[@]}"; do
   echo "$((i + 1)). ${emails[$i]}"
done
read -p "Choose client: " client
if ! [[ "$client" =~ ^[0-9]+$ ]] || (( client < 1 || client > ${#emails[@]} )); then
    echo "Error: number must be between 1 and ${#emails[@]}"
    exit 1
fi
selected_email="${emails[$((client - 1))]}"
index=$(jq --arg email "$selected_email" '.inbounds[0].settings.clients | to_entries[] | select(.value.email == $email) | .key'  /usr/local/etc/xray/config.json)
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json) 
uuid=$(jq --argjson index "$index" -r '.inbounds[0].settings.clients[$index].id' /usr/local/etc/xray/config.json)
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/xray/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)
username=$(jq --argjson index "$index" -r '.inbounds[0].settings.clients[$index].email' /usr/local/etc/xray/config.json)
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
fp=$(jq -r '.inbounds[0].streamSettings.realitySettingsExt.fingerprint' /usr/local/etc/xray/config.json)
ip=$(curl -4 -s icanhazip.com)
link="$protocol://$uuid@$ip:$port?security=reality&sni=$sni&fp=$fp&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$username"
echo ""
echo "Connection link:"
echo "$link"
echo ""
echo "QR-code:"
echo ${link} | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/sharelink

systemctl restart xray

echo "Xray-core установлен (SNI: $selected_sni, Fingerprint: $fp, Port: $port)"
mainuser

# --- Help ---
touch $HOME/help
cat << 'EOF' > $HOME/help

Xray user management commands:

    mainuser   - show connection link for main user
    newuser    - create new user
    rmuser     - remove users
    sharelink  - show users and generate connection link for them
    userlist   - show clients list

Config file:

    /usr/local/etc/xray/config.json

Restart command:

    systemctl restart xray

Change SNI/fingerprint/port for bypass:
    nano /usr/local/etc/xray/config.json # (change dest/serverNames/fingerprint/port)
    systemctl restart xray

!!! ВАЖНО: если не работает — пробуй другой SNI, fingerprint, порт, RU-локацию, и следи за актуальным списком "дырявых" доменов.

EOF
